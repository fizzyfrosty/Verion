Random Notes


Immediate tasks:

Login
Upvote/Downvote
Reply to comments
Make Posts
Read messages
Write Messages
View Users

Upvote/Downvote Submission 

* Prompt login if not logged in
* If Successfully logged in, register upvote
* If failed login, reset voting


* Vote for Comments
	* Add Buttons
	* UI with request behavior
	- Handle Not Enough CCP to downvote result, from response?

- Make a top level comment
	* Add button to comment
	* UI for entering comment
	- Insert comment on top level

- Reply to comments
	* Add button for reply
	* UI for submitting comment
	- Insert comment/reload comments

* ComposeCommentViewController
	* Add white border to background view
	* Make UITextView rounded
	* Make a data model for the viewcontroller
		* initialize with type - top level, or comment reply
		* load username
		* subverse name
		* submission id
		* comment id (if reply)
	* Create delegate
		* send, successful
		* did close
	* When press send, send to server
		* Add request to data provider
	* On success, dismiss, tell delegate finished
		x return a copy of the data model
		* Include the markdown text used
	* Inject dependencies
	* On error, display message returned on popup alert
	* On Close, confirm close before closing
	* Animate show
	* Animate hide
	* Show Keyboard
	* Shift View by keyboard height
	* Do not allow more than 1 ComposeCommentVC to be presented

* CommentsViewController
	* Load the ComposeCommentsViewController with an initializing data model
	* Do not push view controller
		* just add background subview
		* create a strong reference
		* call a show() method
	* Set as delegate
	* Call from top level comment
	* Call from each comment reply
	* On return, success or failure
		x remove strong reference
		* call hide() method, possibly using SpringViews
	* Has faded background
	* Cannot be interrupted

- On success return: reload, or insert returned comment into comments
	* initialize a view model, bind to returned CommentDataModel
	* If top level comment, add to beginning of array
		* Reload table
	- If comment reply, add to the viewModel's children
		- Reload table for inserted item



Online Requests
- Attempt to make request using OAuthHandler with access token
- Attempt to use refreshToken with an invalid access token
- Submission Voting
- Comment Voting
- Comment Replies
	- Top comment
	- Child reply comment
- Register the "Vote" value for submission loading/refresh in UI
- Realign margins for vote buttons



Login:

* Retrieve username from authentication
* Consolidate API Keys and endpoints
* Display Success Indicator for Online login
* Set Access and Refresh Tokens
* Offline and Online login

UI
* Create a login popup
	* Storyboard
	* View Controller
	* Animate popin
	* Keyboard shifts screen
	* focus on username
	* OK button/return button moves from username to password focus
	* OK button then registers sign in
	
* Left Menu showing
	* Login
	* Logout (username)

* Perform login
	* Make call to Data Provider
	* Call finished callbacks
	* ActivityIndicator
	* Show success notification
	* Show error notification
	* Save Username to data
	* Save password using keychain

	* Make actual request
	* Return success and error

* Vote up/down UI
	* Register count on ui
	* Register arrow highlight from ui
	* Make request on button tap
	* On success, do nothing
	* If not logged in, request login


* Save all bindings for SubCellViewModel to external and dispose before binding
* Before making request, ensure that access/refresh tokens are available
	* Present login if not, then continue with request
* Tie logout to oauth handler's access token
	x Do we want to always access keychain for obtaining the access token?
	* Or use a shared OAuth instance?
	* Simplest solution is to use a shared instance
		* Create a shared instance of oauth handler
		* Set tokens where authentication finishes
		* Remove tokens where users log out





Apple Requirements:
* Restore Purchases

Menu bar
* Filter NSFW posts
* Filter Language

Filters
Left Menu:
 * Show NSFW posts
 * Use NSFW thumbnails
 * Filter language

Hide NSFW Posts
 * SubverseViewController after returned view models, filter out nsfw posts

Use NSFW Thumbnails
 * SubverseViewController disable/enable thumbnails

Filter Language
 * apply to words in
	* Submission Title
	* User Comments
	* Submission Text



* Flag submission posts, remove
	* Add button to flag+remove post
		x Add id to block list
	x Remove it
	* Show message for reviewing post

* Block Users in comments
	* Add button to block user
		* Remove all comments by that user
		* Add user to block list


Load children comments that are hidden

* For a set of comments that exist in children but not returned
	* Create a LoadMore collapsed comment, modifying viewModel values
	* When tapped, make a request for the comments
	* Restructure all comments accordingly

* Load parent comments that are not returned
	* Add a LoadMore collapsed comment
	* When tapped, request comments
	* Restructure






* Add NSFW image to nsfw links
	* checking flag
	* adding image
	* read the nsfw flag from json

* Add Donate cell
	* Take to webpage
	* Use Alert to navigate with safari

x Load Logo on splash

* Website: new pages
	* donate page
	* landing page
* Paypal: 

donate button code: 

<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="F2528FFM6DL44">
<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
</form>




- Welcome Screen?



* Ads
* banner on bottom

* IAP
* Create in app purchase on itunes connect
* implement IAP Manager

* fetch products
* purchase products
* Add Remove Ad cell to left menu
* Actually remove the ads
* Activity Indicator for transaction

* error messages for:
	* failing to fetch
	* failing to purchase

* remove or dont add duplicates loaded
	* When submission data models are returned, compare before adding
	* remember how many added?

x block out NSFW
* Share button in comments

* Added new SFSafariViewController to replace UIWebView
* Disabled AllowsArbitraryLoads in AppTransportSecurity

* Install Flurry
* Embed inside analytics manager protocol, extend the logging functions to allow another analytics tool in future


* Analytics
What to log?
Goals:
- To help people promote communication
- Want them to use the app daily, for long periods of time, spread pizzagate

Track:
User Activities:
- what functions they use the most
- Where they spend the most time

App Performance:
- Time for requests?

Actions to Track:
* Subverse Controller 
	* Initial Loading
		* subverse
	* Load More Submissions
		* page number
		* subverse
		* sort type
	* Pull to Refresh
		* subverse
		* sort type
	* Sorted By:
		* sort type
		* subverse

* Left Menu
	* Viewing
	* Clear History
		* subverses
	* Load Subverse
		* subverse

Comments Controller
	* Viewing
		* subverse
		* type: image/link/text
	* Share
		* subverse
		* type: image/link/text

	* Content Link, open safari browser
		* subverse
		* type: image/link


* fix Sorted By Top date filter
x SFSafariController's nav bar color



* Research side menu
* Sketch template

* Import slidermenu
* Create Storyboard
* Create View Controllers
* Hook up data

* Data persistence

* When loading a subverse in SubverseController, tell the SubverseController delegate
* When loading a subverse in LeftMenuController, tell LeftMenuController delegate
* max number of history entries
* Clear history refresh table

* Sidebar
	* subverse history
	* clear history
	x (optional) current subverse info
	x Favorites (optional)
		- Add subverse to favorites
		- Favorites list, remove

* Get sample data
* Make the v1 data models

* Perhaps just use v1 for Comments?
	* Bind data model to view model

* Add nested children

* populate all children


* Populate children
* Start minimized
* reload only the changed cells

* Stagger child comment cells
	* Place all objects inside a shiftingContentView?
	* make alternating background views for staggering
	* Record what child level each view model is in
	* CommentCells change the leading alignment by a factor of bgViews.widths based on child level

* Adjust width of textview based on child depth 

* Tweak colors


* Add delay to the binding algorithm on "Load More" and replace with a loading graphic.
* replace the binding algorithm on "Load More" with a call to the data provider

* Implement loading subverse with v1 api
* Ensure it works with legacy api still
* Try with offline data provider


* Load More works
* Sort By reloads page 0 with new sort
* Set the max number of pages to 19

* V1 for Submission Title/Content/Sortby stuffs
* refactor comments to work with legacy api


* Program against v1 api
	* Subverse list request
		* DataModel
		* Bind DataModel to Subverse View Model
	* subverse submissions
	* comments



* Make gif/video
	- frontpage
	- scroll
	- go into image
	- go back
	- find new subverse
	- scroll down to load more
	- go back to front page

* Created Website
* Mailchimp for mailing list

* Support Images
* On launching Find Subverse going back to Subverse Controller, clear it
* When loading subverse, disable scrolling
* On Sort, scroll to top

* activity indicator for loading image/gif
* progress indicator for loading gif

* Get sample Legacy comment json data
* Data models
	* legacy comments
	x v1 comments
* Storyboard Comment Cell
	* layouts
	* formatting
* View Model
	x Children nodes?
* Fetch data from OfflineDataProvider
	* return legacy data models
	* bind to viewModels
	* Show Comment Cells on finish/reload table
* Cell Height
* Loading Cell
* Reload table animated
* Shadows
* Collapsable comments
- Children?



* Create UIWebView with Progress, back/forward, refresh buttons
* Intercept click events from textViews and launch the custom UIWebView

* Launch links into web browser in Submission Content Cell
* Launch links from comments or text posts into web browser

* Action Sheet substitute implementation for iPad
* Sort By new for comments
* Sort by top for comments

* Sort By for submissions

* Load real data using alamofire from voat.co



* Search for Subverse
	* Create new view controller 
	* Search Bar
		* Create
		* Setup
	* Get sample json data
	* Populate with sample json data
	* Filter subverses
* On return, go back to submissions controller
	* reload and populate with subverse
	* Make request based on subverse name
* On cancel, pop the search controller

* Display message/ui for subverses not in list of filtered
* Invalid subverse entered
	* show ui for nonexistent subverse

* Turn subverse name into button, same action as search icon




* Bind title cell view model to submission data
x Bind sortby cell view model to submission data

* Bind viewModels to cells
	* title
	* content: 
		* text
		* image
			- jpg/png
			- gifs?
		* link
	* sortby
* Load correct content cell

* Format text
	* title
	* content cell

* Calculate cell height for
	* title cell
	* content cell
		* text
		* AttributedText
		* image
		* link
	* sortby


- Test displaying Image content type
	* jpg
	- gif

* Submission View 
	* Displaying kinds of content
		* Image
		* Video
		* Link
		* Text Post

* Comments View Controller
	* Create cells
	* Autolayout
		* Submission
		* Comment
		* Load More
		* hW
		* wR hC
	* SubmissionCellViewModel
		* SubmissionTitleCellViewModel
		* SubmissionTextCellViewModel
		* SubmissionImageCellViewModel
		* SubmissionLinkCellViewModel
		* CommentSortByCellViewModel

	* Initial load, show loading until submission done loading
		x Activity Indicator Provider, for both view controllers
		* Made an activity indicator cell for the comments
		* Start animating on load
		* Stop on data returned closure

	* Title
	* Text
	* Image/Gif
	* Link
	* SortBy

	* Comments
	* Offline Data Provider
		* use Legacy comment data (model), make request?
		* use Legacy submission data, no need to request. pass on from tapped cell?	
		
	* CommentCellViewModel
	* Comment Data Model

	* Load data
		* Submission info
		* Comments
		x Nested comments?

* Sort Submissions by
	* Hot (by rating)
	* Top (by vote count)
	* New (by date)

* Refresh control
	* Pull down to refresh
	* Release to refresh
	* Refreshing (animation?)
	* Both orientations

* Load More when hit bottom
	* Load more when hit bottom
	* Load a cell for tapping Load More
		* Create the cell
		* Load the cell if the index is last element
		* Put increaseNumber() in the row selected callback
	* Put the event into a button 
	* Don't give option to load more at end
	* Only bind cells that are being displayed
	* Attach binding of cells to when being displayed more

* Refresh Control

* Calculate minimum height
	* In viewModel, if no image, minimum height is less
	* Move height calculation to viewModel

* When thumbnail doesn't exist, self post
	* When cell is binding to viewModel, identify that thumbnail image doesn't exist
	* Make width 0


* Populate UIImage with thumbnail
	* Populate the thumbnail link when binding model->viewModel
	* viewModel needs a UIImage, create when initializing
	* When loading cell, set the image
	* Handle when thumbnail link is shorthand for residing on Voat severs
	* Load cells/images in background thread

* Correctly store time
	* Convert string to NSDate

* Load dataModel with sample JSON data

* Correctly Resizing the Subverse's Submission Cell

DataProvider implementation and usage


* When controller is initializing the cells, the dataprovider provides the viewModels in order
	* Controller supplies the viewModel instance
	* dataProvider binds viewModel to dataModel
	* Then the cell gets initialized and binds to the viewModel


* Controller is initialized with a dataProvider via injection
* When does dataModel make its request?
	* on Controller loading
* Controller loads with loading message cell
	* dataProvider makes request
	* returns array of dataModels, or error
	* Controller supplies viewModels, dataProvider binds to dataModels
	* Reloads table data

* Table reload
	* Gets viewModels
	* creates cells
	* etc.


Eureka! An MVVM - model, view, view-model. 
- A view-model is the data layer right under the view!
- It can hold persistent data for the view, as well as owning the model
	- The view-model is updated by the model, or by a data-supply layer inbetween
	- The Controller then updates the view according to the view-model


My app's architecture:
---------------------
Accepting Data and populating UI
- ViewController talks to a DataSupplier, and is given a view-model
	- the view-model determines what views to create (kinds of cells)
	- Once created, the view accepts the view-model as input and binds to it
- Even on load, ViewController creates view-model
	- i.e. refresh control view-model
	- then feeds view-model to the view (the actual refresh control)
	- it is responsible for activating view through interfacing with the view-model

User Input, communicating with the DataSupplier
- Touching the view triggers UI and view-model changes
- Do view-model changes automatically trigger data supplier?
	- So on creation, DataSupplier binds view-model to model?
	- When view-model changes, activates 
		- 1) local data model, or
		- 2) DataSupplier data request
	- Does this happen automatically? Yes, it should.

DataSupplier triggering UI
- When the DataSupplier retrieves data, it sets view-model properties
	- On set, can use bindings to trigger properties to show UI changes	


- Voat has limited upvotes depending on your account life
- May want to contact server on startup to see if a message should be displayed
- Think about monetization...





Design.io
https://designcode.io/swiftapp

Content Generator for Sketch
https://github.com/timuric/Content-generator-sketch-plugin

Animation library
https://github.com/MengTo/Spring



Problem: How to display comments from markdown source?
Convert markdown to NSAttributedString: https://github.com/laptobbe/TSMarkdownParser



Problem: How to minimize/maximize comments?
* minimize all root comments
	* minimize first child comment
	- minimize second child comments
	- minimize all comments
- Construct tree to match comment data structures


Making Status Bar white:
- set the Status Bar Style: Light in the main settings
- in Info.plist, set View controller-based status bar appearance: No




List of things to complete for Subverse View Controller

- navigation bar label





Features List

Main features required to publish:
- Welcome Screen
- Display Submissions of a Subverse
- Show Subverse submission content
- Show Comments
- Find Subverse

Features to add:
- Login
- Comment
- Upvote/downvote
- Messages
	- View
	- Reply


Not Logged In

* Get main Submissions
	* show rating
- Sort by
* Find subverses

* Retrieve and show single threads
	- Comments
	- Videos
	- Images
- Show Comments
	- staggered
	- OP vs users

- Collapse comments
- Uncollapse comments


User Accounts

- Login
- Logout

- Upvote/downvote main submissions

- Upvote/downvote comments	
- Make a post
- Comment on posts

- Read Messages
- Respond to Messages


Flurry App Key:
BKGPY6BG5Y9FWCSSXWGG




